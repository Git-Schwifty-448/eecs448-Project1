var search_data = {"index":{"searchIndex":["admin","attendee","controller","databasecontroller","driver","event","object","user","add_attendee()","add_timeslot()","attend_event()","choice_getter()","clean_attendee()","clear_timeslot()","convert_to_military_time()","create_date()","create_date_time()","create_time_array()","create_user()","desc_printer()","event_controller()","get_alpha()","get_attendees()","get_date()","get_description()","get_description()","get_event_by_id()","get_event_counter()","get_event_date()","get_event_name()","get_events()","get_events()","get_f_name()","get_id()","get_l_name()","get_name()","get_name()","get_timeslots()","get_timeslots()","get_timeslots_12hrs()","get_timeslots_12hrs()","get_timeslots_array()","get_validation()","hr()","init_database()","menu_builder()","new()","new()","new()","new()","new()","new()","new()","persist_attendee()","persist_event()","reminder()","run()","run()","run()","run()","set_admin_info()","set_event_counter()","set_event_date()","set_event_description()","set_event_name()","set_f_name()","set_l_name()","set_timeslot_array()","single_event_printer()","sub_title_print()","testing()","time_check()","title_print()","title_print_ext()","update_event()","validate_input()","readme","planning"],"longSearchIndex":["admin","attendee","controller","databasecontroller","driver","event","object","user","event#add_attendee()","attendee#add_timeslot()","user#attend_event()","driver#choice_getter()","user#clean_attendee()","attendee#clear_timeslot()","user#convert_to_military_time()","admin#create_date()","admin#create_date_time()","admin#create_time_array()","user#create_user()","driver#desc_printer()","user#event_controller()","driver#get_alpha()","event#get_attendees()","event#get_date()","admin#get_description()","event#get_description()","user#get_event_by_id()","admin#get_event_counter()","admin#get_event_date()","admin#get_event_name()","databasecontroller#get_events()","user#get_events()","admin#get_f_name()","event#get_id()","admin#get_l_name()","attendee#get_name()","event#get_name()","attendee#get_timeslots()","event#get_timeslots()","attendee#get_timeslots_12hrs()","event#get_timeslots_12hrs()","admin#get_timeslots_array()","admin#get_validation()","driver#hr()","databasecontroller#init_database()","driver#menu_builder()","admin::new()","attendee::new()","controller::new()","databasecontroller::new()","driver::new()","event::new()","user::new()","databasecontroller#persist_attendee()","databasecontroller#persist_event()","user#reminder()","admin#run()","controller#run()","object#run()","user#run()","admin#set_admin_info()","admin#set_event_counter()","admin#set_event_date()","admin#set_event_description()","admin#set_event_name()","admin#set_f_name()","admin#set_l_name()","admin#set_timeslot_array()","user#single_event_printer()","driver#sub_title_print()","user#testing()","admin#time_check()","driver#title_print()","driver#title_print_ext()","databasecontroller#update_event()","driver#validate_input()","",""],"info":[["Admin","","Admin.html","",""],["Attendee","","Attendee.html","","<p>File: attendee.rb Author: Alex Shadley Date Created: 9/11/17 Description:\nstores information about an …\n"],["Controller","","Controller.html","",""],["DatabaseController","","DatabaseController.html","",""],["Driver","","Driver.html","","<p>File: driver.rb Author: Date Created: 9/8/17 Description:\n"],["Event","","Event.html","","<p>File: event.rb Author: Alex Shadley Date Created: 9/10/17 Description:\nModels an event.\n"],["Object","","Object.html","",""],["User","","User.html","",""],["add_attendee","Event","Event.html#method-i-add_attendee","(attendee)",""],["add_timeslot","Attendee","Attendee.html#method-i-add_timeslot","(new_slot)",""],["attend_event","User","User.html#method-i-attend_event","(event)","<p>takes an event given by the event_controller method, the id of that event\n"],["choice_getter","Driver","Driver.html#method-i-choice_getter","(low,high)",""],["clean_attendee","User","User.html#method-i-clean_attendee","(attendee)","<p>Resets with the same username to go to multiple events\n"],["clear_timeslot","Attendee","Attendee.html#method-i-clear_timeslot","()",""],["convert_to_military_time","User","User.html#method-i-convert_to_military_time","(standard_time)","<p>converts a single time to military time for use with creating attendee\n"],["create_date","Admin","Admin.html#method-i-create_date","()","<p>Method in charge of getting information of events and creating them.\n"],["create_date_time","Admin","Admin.html#method-i-create_date_time","(event_number)",""],["create_time_array","Admin","Admin.html#method-i-create_time_array","(hr)","<p>Creates an array based on the time representation that the user choses.\n"],["create_user","User","User.html#method-i-create_user","(origin_time_slot)","<p>Creates an attendee object to be added to the event\n"],["desc_printer","Driver","Driver.html#method-i-desc_printer","(string)",""],["event_controller","User","User.html#method-i-event_controller","()","<p>outputs each event and returns if the user wants to attend\n"],["get_alpha","Driver","Driver.html#method-i-get_alpha","(message)","<p>Takes a string (message) and validates user input to only allow responses\nthat only contain upper and …\n"],["get_attendees","Event","Event.html#method-i-get_attendees","()",""],["get_date","Event","Event.html#method-i-get_date","()",""],["get_description","Admin","Admin.html#method-i-get_description","()",""],["get_description","Event","Event.html#method-i-get_description","()",""],["get_event_by_id","User","User.html#method-i-get_event_by_id","(id_number)","<p>returns an event object that matches the id passed in, if none found,\nthrows an error\n"],["get_event_counter","Admin","Admin.html#method-i-get_event_counter","()",""],["get_event_date","Admin","Admin.html#method-i-get_event_date","()",""],["get_event_name","Admin","Admin.html#method-i-get_event_name","()",""],["get_events","DatabaseController","DatabaseController.html#method-i-get_events","()","<p>returns sorted array of events\n<p>example usage: events = dbController.get_events events.getName etc.\n<p>TODO: …\n"],["get_events","User","User.html#method-i-get_events","()","<p>If there are events stored in the database, they are grabbed  and printed\nto terminal window (via single_event_printer …\n"],["get_f_name","Admin","Admin.html#method-i-get_f_name","()","<p>Accessor method\n"],["get_id","Event","Event.html#method-i-get_id","()",""],["get_l_name","Admin","Admin.html#method-i-get_l_name","()",""],["get_name","Attendee","Attendee.html#method-i-get_name","()",""],["get_name","Event","Event.html#method-i-get_name","()",""],["get_timeslots","Attendee","Attendee.html#method-i-get_timeslots","()",""],["get_timeslots","Event","Event.html#method-i-get_timeslots","()",""],["get_timeslots_12hrs","Attendee","Attendee.html#method-i-get_timeslots_12hrs","()",""],["get_timeslots_12hrs","Event","Event.html#method-i-get_timeslots_12hrs","()",""],["get_timeslots_array","Admin","Admin.html#method-i-get_timeslots_array","()",""],["get_validation","Admin","Admin.html#method-i-get_validation","()",""],["hr","Driver","Driver.html#method-i-hr","()",""],["init_database","DatabaseController","DatabaseController.html#method-i-init_database","()","<p>checks to see if database tables exist and creates them if not\n"],["menu_builder","Driver","Driver.html#method-i-menu_builder","(option_array)",""],["new","Admin","Admin.html#method-c-new","()",""],["new","Attendee","Attendee.html#method-c-new","(name, timeslots)","<p>timeslots and attendees must be passed in as arrays, but empty arrays are\nare acceptable\n"],["new","Controller","Controller.html#method-c-new","()",""],["new","DatabaseController","DatabaseController.html#method-c-new","()",""],["new","Driver","Driver.html#method-c-new","()",""],["new","Event","Event.html#method-c-new","(name, description, timeslots, attendees, id = nil)","<p>Params:\n<p>name &mdash; string containing the name of the event\n<p>+description &mdash; string containing the description of …\n"],["new","User","User.html#method-c-new","()",""],["persist_attendee","DatabaseController","DatabaseController.html#method-i-persist_attendee","(attendee, parentid)",""],["persist_event","DatabaseController","DatabaseController.html#method-i-persist_event","(event)","<p>takes an event object as a parameter, then persists the event and its\nattendees to the database\n<p>NOTE: …\n"],["reminder","User","User.html#method-i-reminder","()",""],["run","Admin","Admin.html#method-i-run","()",""],["run","Controller","Controller.html#method-i-run","()",""],["run","Object","Object.html#method-i-run","()",""],["run","User","User.html#method-i-run","()",""],["set_admin_info","Admin","Admin.html#method-i-set_admin_info","()","<p>Receive admin&#39;s information\n"],["set_event_counter","Admin","Admin.html#method-i-set_event_counter","(increase_number)",""],["set_event_date","Admin","Admin.html#method-i-set_event_date","(date)",""],["set_event_description","Admin","Admin.html#method-i-set_event_description","(event_description)",""],["set_event_name","Admin","Admin.html#method-i-set_event_name","(event_name)",""],["set_f_name","Admin","Admin.html#method-i-set_f_name","(theFName)","<p>Setter method\n"],["set_l_name","Admin","Admin.html#method-i-set_l_name","(theLName)",""],["set_timeslot_array","Admin","Admin.html#method-i-set_timeslot_array","(timeslots, i)",""],["single_event_printer","User","User.html#method-i-single_event_printer","(event,single)","<p>Template for printing a single event takes an event object and a true/false\nif this is for printing in …\n"],["sub_title_print","Driver","Driver.html#method-i-sub_title_print","(title)",""],["testing","User","User.html#method-i-testing","()",""],["time_check","Admin","Admin.html#method-i-time_check","(time, array)","<p>Checks to see if the time matches any in the array.\n"],["title_print","Driver","Driver.html#method-i-title_print","(title)",""],["title_print_ext","Driver","Driver.html#method-i-title_print_ext","(title)","<p>for use with sub title print onyl\n"],["update_event","DatabaseController","DatabaseController.html#method-i-update_event","(event)",""],["validate_input","Driver","Driver.html#method-i-validate_input","(acceptable_input)","<p>takes an array of acceptable answers and only allows the user to choose\nfrom that list\n"],["README","","README_txt.html","",""],["planning","","planning_txt.html","","<p>Project 1 Planning\n<p>Modes + Admin\n\n<pre>-&gt; User can create an event\n-&gt; Event will have a name\n-&gt; Must be a real ...</pre>\n"]]}}